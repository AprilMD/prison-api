description:  The collection of inmates within the system.
type: { get-collection: { collectionSchema: inmateSummaries } }
is: [
  searchable: {fieldsList : "bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, assignedLivingUnitId, or assignedOfficerUserId"},
  orderable: {fieldsList : "bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, or assignedLivingUnitId"},
  pageable
]

/{bookingId}:
  description: The details specific to the specified inmate.
  type: { get-item: { schema: inmateDetails }}

/{bookingId}/caseNotes:
  description: The collection of <<resourcePathName>>
  get:
    description: Get all <<resourcePathName | !pluralize>>.
    is: [
      searchable: {fieldsList : "creationDateTime, type, subType, source"},
      orderable: {fieldsList : "creationDateTime, type, subType, source"},
      pageable
    ]
    responses:
      200:
        body:
          application/json:
            schema: caseNotes
      400:
        body:
          application/json:
            schema: httpStatus
            example: !include ../examples/output/400.sample.json
      404:
        body:
          application/json:
              schema: httpStatus
              example:  !include ../examples/output/404.sample.json
      500:
        body:
          application/json:
            schema: httpStatus
            example: !include ../examples/output/500.sample.json
  post:
    description: Entry of new case note under a booking.
    body:
      application/json:
        schema: newCaseNote
    responses:
      201:
        description: The Case Note has been recorded. The updated object is returned including the status.
        body:
          application/json:
            schema: caseNote
      400:
        body:
          application/json:
            schema: httpStatus
            example: !include ../examples/output/400.sample.json
      404:
        description: The error will define after seeing implimentation.
        body:
          application/json:
              schema: httpStatus
              example:  !include ../examples/output/404.sample.json
      409:
        description: The case note has already been recorded under the booking. The current unmodified object (including status) is returned.
        body:
          application/json:
            schema: caseNote
      500:
        body:
          application/json:
            schema: httpStatus
            example: !include ../examples/output/500.sample.json

/{bookingId}/caseNotes/{caseNoteId}:
  description: The specific case note of a booking.
  type: { get-item: { schema: caseNote } }


  put:
    description: It will update text note of specified case note. Text will not be replaced but it will be appended by provided text.
    body:
      application/json:
        schema: updateCaseNote
    responses:
      201:
        description: The Case Note has been recorded. The updated object is returned including the status.
        body:
          application/json:
            schema: caseNote
      400:
        body:
          application/json:
            schema: httpStatus
            example: !include ../examples/output/400.sample.json
      404:
        description: The error will define after seeing implimentation.
        body:
          application/json:
              schema: httpStatus
              example:  !include ../examples/output/404.sample.json
      409:
        description: The case note has already been recorded under the booking. The current unmodified object (including status) is returned.
        body:
          application/json:
            schema: caseNote
      500:
        body:
          application/json:
            schema: httpStatus
            example: !include ../examples/output/500.sample.json

/{bookingId}/alerts:
  description: The collection of alerts associated to the inmate.
  type: {get-collection: {collectionSchema: alerts}}
  is: [
    orderable: {fieldsList: "alertType, alertCode, createDate, expireDate"},
    searchable: {fieldsList: "alertType, alertCode, createDate, expireDate"},
    pageable
  ]

/{bookingId}/alerts/{alertId}:
  description: A specific alert associated to the booking.
  type: { get-item: { schema: alert } }
  
/{bookingId}/aliases:
  description: The collection of aliases associated with the inmate.
  type: {get-collection: {collectionSchema: aliases}}
  is: [
    orderable: {fieldsList: "firstName, lastName, age, dob, middleName, nameType"}
  ]
