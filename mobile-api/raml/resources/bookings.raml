/:
  (javaOperationName): getOffenderBookings
  type: { readOnlyCollectionPaged: { type: OffenderBooking, description: Gets summary details for all offender accessible to current user. } }
  is: [
    searchable: {fieldsList : "bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, assignedLivingUnitId, assignedOfficerUserId"},
    sortable: {fieldsList : "bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, assignedLivingUnitId"},
  ]

/{bookingId}:
  (javaOperationName): getOffenderBooking
  type: { readOnlyItem: { type: InmateDetail, description: Gets details for specified offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender

/{bookingId}/caseNotes:
  description: Offender Case Notes
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  get:
    description: Get a paged list of case notes for offender
    queryParameters:
      from:
        description: start contact date to search from
        type: string
      to:
        description: end contact date to search up to (including this date)
        type: string
    responses:
      200:
        body:
          application/json:
            CaseNote[]
    is: [
      pageable, hasResponsePagination,
      searchable: {fieldsList : "creationDateTime, type, subType, source"},
      sortable: {fieldsList : "creationDateTime, type, subType, source"},
    ]

  post:
    description: Entry of new case note under a booking.
    body:
      application/json:
        type: NewCaseNote
    responses:
      201:
        body:
          application/json:
            type: CaseNote
            description: The Case Note has been recorded. The updated object is returned including the status.
      409:
        body:
          application/json:
            type: ErrorResponse
            description: The case note has already been recorded under the booking. The current unmodified object (including status) is returned.

/{bookingId}/caseNotes/{caseNoteId}:
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
    caseNoteId:
      (javaType): Long
      description: The case note id
  get:
    description: The specific case note of a booking
    responses:
      200:
        body:
          application/json:
            CaseNote

  put:
    description: Updates text note of specified case note. Text will not be replaced but it will be appended by provided text.
    body:
      application/json:
        type: UpdateCaseNote
    responses:
      201:
        body:
          application/json:
            type: CaseNote
            description: The Case Note has been recorded. The updated object is returned including the status.

/{bookingId}/alerts:
  (javaOperationName): getOffenderAlerts
  type: {readOnlyCollectionPaged: {type: Alert, description: The collection of alerts associated to the inmate. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  is: [
    sortable: {fieldsList: "alertType, alertCode, createDate, expireDate"},
    searchable: {fieldsList: "alertType, alertCode, createDate, expireDate"},
  ]

/{bookingId}/alerts/{alertId}:
  (javaOperationName): getOffenderAlert
  type: { readOnlyItem: { type: Alert, description: A specific alert associated to the booking. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
    alertId:
      (javaType): Long
      description: The Alert Id

/{bookingId}/assessment/{assessmentCode}:
  (javaOperationName): getAssessmentByCode
  type: { readOnlyItem: { type: Assessment, description: A specific assessment associated to the booking by assessment type code. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
    assessmentCode:
      type: string
      description: Assessment Type Code

/{bookingId}/aliases:
  (javaOperationName): getOffenderAliases
  type: {readOnlyCollectionPaged: {type: Alias, description: Gets aliases associated with specified booking.}}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  is: [
    sortable: {fieldsList: "firstName, lastName, age, dob, middleName, nameType, createDate"}
  ]

/{bookingId}/sentenceDetail:
  (javaOperationName): getBookingSentenceDetail
  type: {
    readOnlyItem: {
      type: SentenceDetail,
      description: Gets sentence details (e.g. key dates) for offender booking.
    }
  }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender

/{bookingId}/iepSummary:
  (javaOperationName): getBookingIEPSummary
  type: {
    readOnlyItem: {
      type: PrivilegeSummary,
      description: Gets IEP (Incentives & Earned Privileges) summary for offender booking.
    }
  }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  get:
    queryParameters:
      withDetails:
        description: Toggle to return IEP detail entries in response (or not).
        type: boolean

/{bookingId}/balances:
  (javaOperationName): getBalances
  type: { readOnlyItem: { type: Account, description: Returns booking account balances. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/events/today:
  (javaOperationName): getEventsToday
  type: {readOnlyCollection: {type: ScheduledEvent, description: All today's scheduled events for the offender. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/events/thisWeek:
  (javaOperationName): getEventsThisWeek
  type: {readOnlyCollection: {type: ScheduledEvent, description: All scheduled events for the offender for the coming week. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/events/nextWeek:
  (javaOperationName): getEventsNextWeek
  type: {readOnlyCollection: {type: ScheduledEvent, description: All scheduled events for the offender for the following week. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/activities:
  (javaOperationName): getBookingActivities
  type: {readOnlyCollectionPaged: {type: ScheduledEvent, description: Scheduled activities for the offender. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Returned activities must be scheduled on or after this date (in YYYY-MM-DD format).
        example: 2017-06-01
      toDate?:
        type: string
        description: Returned activities must be scheduled on or before this date (in YYYY-MM-DD format).
        example: 2017-09-01
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/activities/today:
  (javaOperationName): getBookingActivitiesForToday
  type: {readOnlyCollection: {type: ScheduledEvent, description: Scheduled activities for the offender for current day. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/contacts:
  (javaOperationName): getContacts
  type: { readOnlyItem: { type: ContactDetail, description: Get current next of kin details } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/adjudications:
  (javaOperationName): getAdjudications
  type: { readOnlyItem: { type: AdjudicationDetail, description: Get current award or sanction details } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      awardCutoffDate?:
        type: string
        description: Only awards ending on or after this date (in YYYY-MM-DD format) will be considered.
        example: 2017-06-17
      adjudicationCutoffDate?:
        type: string
        description: Only proved adjudications ending on or after this date (in YYYY-MM-DD format) will be counted.
        example: 2017-09-22

/{bookingId}/caseNotes/{type}/{subType}/count:
  (javaOperationName): getCaseNoteCount
  type: {readOnlyItem: {type: CaseNoteCount, description: Count of case notes of specific type/subType for the offender. }}
  uriParameters:
    bookingId:
      type: number
      (javaType): Long
      description: The offender booking id
    type:
      type: string
      description: Case note type.
    subType:
      type: string
      description: Case note sub-type.
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.
        example: 2017-06-01
      toDate?:
        type: string
        description: Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered.
        example: 2017-09-01

/{bookingId}/mainOffence:
  (javaOperationName): getMainOffence
  type: { readOnlyCollection: { type: OffenceDetail, description: Main offence details. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/visits:
  (javaOperationName): getBookingVisits
  type: {readOnlyCollectionPaged: {type: ScheduledEvent, description: Scheduled visits for the offender. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Returned visits must be scheduled on or after this date (in YYYY-MM-DD format).
        example: 2017-06-01
      toDate?:
        type: string
        description: Returned visits must be scheduled on or before this date (in YYYY-MM-DD format).
        example: 2017-09-01
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/visits/today:
  (javaOperationName): getBookingVisitsForToday
  type: {readOnlyCollection: {type: ScheduledEvent, description: Scheduled visits for the offender for current day. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/appointments:
  (javaOperationName): getBookingAppointments
  type: {readOnlyCollectionPaged: {type: ScheduledEvent, description: Scheduled appointments for the offender. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Returned appointments must be scheduled on or after this date (in YYYY-MM-DD format).
        example: 2017-06-01
      toDate?:
        type: string
        description: Returned appointments must be scheduled on or before this date (in YYYY-MM-DD format).
        example: 2017-09-01
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/appointments/today:
  (javaOperationName): getBookingAppointmentsForToday
  type: {readOnlyCollection: {type: ScheduledEvent, description: Scheduled appointments for the offender for current day. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/appointments/thisWeek:
  (javaOperationName): getBookingAppointmentsForThisWeek
  type: {readOnlyCollection: {type: ScheduledEvent, description: Scheduled appointments for the offender for 7 days ahead starting from today. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/appointments/nextWeek:
  (javaOperationName): getBookingAppointmentsForNextWeek
  type: {readOnlyCollection: {type: ScheduledEvent, description: Scheduled appointments for the offender for 7 days ahead starting a week from today. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]
