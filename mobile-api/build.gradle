import org.apache.commons.io.FileUtils
import org.apache.tools.ant.taskdefs.condition.Os

project(":mobile-api") {
    // Project-specific properties
    def ramlDir = new File("${rootDir}/mobile-api/raml")
    def ramlFile = new File(ramlDir, "api.raml")
    def htmlFile = new File(ramlDir, "api.html")

    def raml10Dir = new File("${rootDir}/mobile-api/raml10")
    def raml10File = new File(raml10Dir, "api.raml")

    def oas20File = new File("${resourceGenDir}/api.json")

    // RAML 0.8 documentation task
    //
    // The following task requires node-js installed in order to generate the API HTML version
    // Also install raml2html after install the node-js with the following command
    // npm i -g raml2html@3.0.1
    def htmlGenCommand = "raml2html"
    def htmlGenArgs = ['-i', ramlFile.absolutePath, '-o', htmlFile.absolutePath]

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        htmlGenCommand = "${rootDir}/mobile-api/raml/htmlgen.bat"
        htmlGenArgs = [ramlFile.absolutePath, htmlFile.absolutePath]
    }

    task htmlGen(type: Exec) {
        workingDir ramlDir.absolutePath
        commandLine htmlGenCommand
        args htmlGenArgs
    }

    // RAML 1.0 to OAS 2.0 Conversion Task
    //
    // The following task requires node-js installed in order to use oas-raml-converter to convert the RAML 1.0 API
    // specification to OAS 2.0 (Swagger 2). After installing node-js, use the following command to install
    // oas-raml-coverter:
    //   npm i -g oas-raml-converter
    def raml2oasCommand = "${rootDir}/mobile-api/raml10/raml2oas.sh"
    def raml2oasArgs = ['-f', 'RAML', '-t', 'OAS20', raml10File.absolutePath]

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        raml2oasCommand = "${rootDir}/mobile-api/raml10/raml2oas.bat"
        raml2oasArgs = [raml10File.absolutePath]
    }

    task raml2oas(type: Exec) {
        doFirst {
            println "Generating OAS 2.0 API specification from RAML 1.0 ..."

            oas20File.createNewFile()
            standardOutput = new FileOutputStream(oas20File)
            environment 'PATH', '/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
            workingDir raml10Dir.absolutePath
            commandLine raml2oasCommand
            args raml2oasArgs
        }
    }

    // Configurations
    configurations {
        // Used to expose/share output (compiled classes) of 'generated' source set
        generatedOutput

        codeGenerator
    }

    // Additional source set: 'generated'
    sourceSets {
        generated {
            // Exclude 'net.syscon.elite2' package as not yet generated correctly
            java {
                srcDir 'src/generated/java'
            }
        }
    }

    // Main compilation dependencies
    dependencies {
        compile project(path: project.path, configuration:'generatedOutput')
        compile "org.springframework.boot:spring-boot-starter-jersey:${version_spring_boot}"
        compile "io.swagger:swagger-jersey2-jaxrs:1.5.16"
        compileOnly 'org.projectlombok:lombok:1.16.18'

        generatedCompile "org.springframework.boot:spring-boot-starter-jersey:${version_spring_boot}"
        generatedCompile "io.swagger:swagger-jersey2-jaxrs:1.5.16"
        generatedCompileOnly 'org.projectlombok:lombok:1.16.18'

        generatedOutput sourceSets.generated.output

        codeGenerator project(":mobile-api-codegen")
        codeGenerator "io.swagger:swagger-codegen-cli:2.2.3"
    }

    // Ensure assembled JAR includes generated and main compiled classes
    jar {
        from sourceSets.generated.output, sourceSets.main.output
    }

    // Custom Task Definitions

    // Task to clean and prepare generated source location
    task cleanGenerated {
        doFirst {
            println "Cleaning generated sources ..."

            FileUtils.forceMkdir resourceGenDir
            FileUtils.forceMkdir sourceGenDir
            FileUtils.cleanDirectory resourceGenDir
            FileUtils.cleanDirectory sourceGenDir
        }
    }

    // Task to generate Java code from RAML 0.8 resources
    task generateRaml08Resources {
        doFirst {
            println "Generating JAXRS API model and interfaces from RAML 0.8 ..."

            def configs = new org.raml.jaxrs.codegen.core.Configuration()

            configs.outputDirectory = sourceGenDir
            configs.sourceDirectory = ramlDir
            configs.setBasePackageName("net.syscon.elite.web.api");
            configs.setJaxrsVersion(org.raml.jaxrs.codegen.core.Configuration.JaxrsVersion.JAXRS_2_0)
            configs.setJsonMapper(org.jsonschema2pojo.AnnotationStyle.JACKSON2)
            configs.setUseJsr303Annotations(false)
            configs.jsonMapperConfiguration = new HashMap<>()
            configs.jsonMapperConfiguration["useLongIntegers"] = "true"
            configs.jsonMapperConfiguration["includeToString"] = "true"
            configs.jsonMapperConfiguration["includeHashcodeAndEquals"] = "true"
            configs.jsonMapperConfiguration["includeConstructors"] = "true"
            configs.jsonMapperConfiguration["useCommonsLang3"] = "true"

            def sourceGenerator = new org.raml.jaxrs.codegen.core.Generator()

            try {
                sourceGenerator.run(new FileReader(new File(ramlDir, "./api.raml")), configs, "")
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    // Task to generate Java code from RAML 1.0 resources
    task generateRaml10Resources {
        doFirst {
            println "Generating JAXRS API model and interfaces from RAML 0.8 ..."

            def config = new org.raml.jaxrs.generator.Configuration()

            config.setModelPackage("net.syscon.elite2.api.model")
            config.setResourcePackage("net.syscon.elite2.api.resource")
            config.setSupportPackage("net.syscon.elite2.api.support")
            config.setOutputDirectory(sourceGenDir)
            config.setTypeConfiguration((String[]) ["jackson"])
            config.setJsonMapper(org.jsonschema2pojo.AnnotationStyle.JACKSON2)

            def mapperConfiguration = new HashMap<>()

            mapperConfiguration["useLongIntegers"] = "true"
            mapperConfiguration["includeToString"] = "true"
            mapperConfiguration["includeHashcodeAndEquals"] = "true"
            mapperConfiguration["includeConstructors"] = "true"
            mapperConfiguration["useCommonsLang3"] = "true"
            mapperConfiguration["includeJsr303Annotations"] = "true"

            config.jsonMapperConfiguration = mapperConfiguration

            def scanner = new org.raml.jaxrs.generator.RamlScanner(config)

            try {
                scanner.handle(raml10File)
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    def codegenConfig = "${rootDir}/mobile-api/raml10/api-gen-cfg.json"

    def jaxrsCodegenArgs = ['generate', '-c', codegenConfig, '-i', oas20File.absolutePath, '-l', 'jaxrsinterfaces',
                            '-o', sourceGenDir, '--type-mappings', 'integer=Long']

    def jaxrsCodegenSystemProps = ['modelDocs':'false',
                                   'apiDocs':'false',
                                   'apiDocs':'false',
                                   'modelTests':'false',
                                   'apiTests':'false',
                                   'apis':'bookings',
                                   'models':'Agency,ErrorResponse,Location,OffenderBooking,PrisonerDetail,SentenceDetail',
                                   'supportingFiles':'ResponseDelegate.java']

    // Task to generate JAXRS code from OAS 2.0 specification (converted from RAML 1.0 using raml2oas task).
    task generateOas20Resources(type:JavaExec) {
        doFirst {
            println "Generating JAXRS API model and interfaces from OAS 2.0 specification ..."

            main = 'io.swagger.codegen.SwaggerCodegen'
            classpath = configurations.codeGenerator
            systemProperties jaxrsCodegenSystemProps
            args jaxrsCodegenArgs
        }
    }

    // TODO: Enable checkstyle once rules reviewed and agreed (but don't enable for tests).
    checkstyleMain.enabled = false
    checkstyleGenerated.enabled = false
    checkstyleTest.enabled = false
    checkstyleIntegrationTest.enabled = false

    // Task Dependencies

    // Ensure generated sources are removed and re-generated before they are compiled
    compileGeneratedJava.dependsOn generateRaml08Resources, generateOas20Resources

    generateOas20Resources.dependsOn cleanGenerated, raml2oas, ':mobile-api-codegen:jar'
    generateOas20Resources.mustRunAfter cleanGenerated

    generateRaml08Resources.dependsOn cleanGenerated

    // Ensure project JAR only created after both main and generated classes are processed
    jar.dependsOn classes, generatedClasses

    // Main Task Definition for project
    task run {
        doLast {
            println ">>> Source Code Generated on \"${sourceGenDir.absolutePath}\"!"
        }
    }

    run.dependsOn clean, jar
}
