package {{package}};

import io.swagger.annotations.*;

{{#imports}}import {{import}};
{{/imports}}

import {{supportPackage}}.*;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;

@Api(tags = {"/{{baseName}}"})
{{#operations}}
public interface {{classname}} {
    {{#operation}}

    @{{httpMethod}}{{#subresourceOperation}}
    @Path("{{path}}"){{/subresourceOperation}}
    {{#hasConsumes}}@Consumes({ {{#consumes}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} }){{/hasConsumes}}
    {{#hasProduces}}@Produces({ {{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }){{/hasProduces}}
    @ApiOperation(value = "{{{summary}}}"{{#notes}}, notes = "{{{notes}}}"{{/notes}}, nickname="{{{nickname}}}")
    @ApiResponses(value = { {{#responses}}
        @ApiResponse(code = {{{code}}}, message = "{{{message}}}", response = {{{baseType}}}.class{{#returnContainer}}, responseContainer = "{{{returnContainer}}}"{{/returnContainer}}{{#hasHeaders}},
        responseHeaders = { {{#headers}}
            @ResponseHeader(name = "{{baseName}}", description = "{{unescapedDescription}}", response = {{baseType}}.class),{{/headers}}
        }{{/hasHeaders}}){{#hasMore}},{{/hasMore}}{{/responses}} })
    {{operationIdCamelCase}}Response {{nickname}}({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},
        {{/hasMore}}{{/allParams}});
    {{/operation}}
{{/operations}}
{{#operations}}
    {{#operation}}

    class {{operationIdCamelCase}}Response extends ResponseDelegate {

        private {{operationIdCamelCase}}Response(Response response, Object entity) {
            super(response, entity);
        }
        {{#responses}}

        public static {{operationIdCamelCase}}Response respond{{{code}}}WithApplicationJson({{{dataType}}} {{#isPageable}}page{{/isPageable}}{{^isPageable}}entity{{/isPageable}}{{#hasHeaders}}{{#headers}}, {{baseType}} {{name}}{{/headers}}{{/hasHeaders}}) {
            Response.ResponseBuilder responseBuilder = Response.status({{{code}}})
                    .header("Content-Type", MediaType.APPLICATION_JSON){{#hasHeaders}}{{#headers}}
                    .header("{{baseName}}", {{name}}){{/headers}}{{/hasHeaders}}{{#isPageable}}{{#paginationHeaders}}
                    .header("{{baseName}}", page.{{name}}){{/paginationHeaders}}{{/isPageable}};
            responseBuilder.entity({{#isPageable}}page.getItems(){{/isPageable}}{{^isPageable}}entity{{/isPageable}});

            return new {{operationIdCamelCase}}Response(responseBuilder.build(), {{#isPageable}}page.getItems(){{/isPageable}}{{^isPageable}}entity{{/isPageable}});
        }
        {{/responses}}
    }
    {{/operation}}
{{/operations}}
}
