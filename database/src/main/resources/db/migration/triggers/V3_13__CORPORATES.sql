CREATE OR REPLACE TRIGGER "CORPORATES_TA"
BEFORE INSERT OR UPDATE OR DELETE ON CORPORATES
REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
  DECLARE
    l_scn NUMBER;
    l_tid VARCHAR2(32);
  BEGIN
    /*
    ============================================================
       Generated by 2.3  Date Generation 10-NOV-2008
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  -------------------------------
        GJC      05/03/2007  2.3          Allow application setting some columns
        GJC      23/10/2006  2.2          Audit DELETE statements
       David Ng  18/04/2006  2.0.1        Audit column trigger
    */
    IF INSERTING
    THEN
      :NEW.create_datetime := NVL(:NEW.create_datetime, systimestamp);
      :NEW.create_user_id := NVL(:NEW.create_user_id, user);
    ELSIF UPDATING
      THEN
        :NEW.modify_datetime := systimestamp;
        :NEW.modify_user_id := user;
    END IF;
    IF NOT DELETING
    THEN
      :NEW.Audit_timestamp := systimestamp;
      :NEW.Audit_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30);
      :NEW.Audit_Module_Name := SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65);
      :NEW.Audit_Client_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64);
      :NEW.Audit_Client_IP_Address := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39);
      :NEW.Audit_Client_Workstation_Name := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64);
      :NEW.Audit_Additional_Info := SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256);
    ELSE
      l_tid := DBMS_TRANSACTION.local_transaction_id(create_transaction=>FALSE);
      SELECT current_scn
      INTO l_scn
      FROM v$database;
      INSERT INTO OMS_DELETED_ROWS
      (
        table_name,
        xid,
        scn,
        audit_timestamp,
        audit_user_id,
        audit_module_name,
        audit_client_user_id,
        audit_client_ip_address,
        audit_client_workstation_name,
        audit_additional_info
      )
      VALUES
        (
          'CORPORATES',
          converttoxid(l_tid),
          l_scn,
          systimestamp,
          SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30),
          SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256)
        );
    END IF;
  END;

/



CREATE OR REPLACE TRIGGER "CORPORATES_T1"
AFTER
DELETE
  ON corporates
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
  DECLARE V_numrows INTEGER;
  BEGIN
    -- Lines added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    -- Change added by GJC 21/12/2007 to check if the trigger code should be executed or not
    /* =========================================================
       Version Number = 2.2  Date ModIFied = 21-DEC-2007
       ========================================================= */
    /* MODIFICATION HISTORY
       Person     	 Date      Version     	 Comments
       ---------    ------     ---------  	 ------------------------------
       Graham       21/12/2007 2.2           #7775: Code added for Merge, fix versioning
       GJC          14/10/2006 2.1           Remove DBMS_OUTPUT calls
       David Ng     06/21/2005 1.0           NOMIS new addresses table
    */
    SELECT count(*)
    INTO v_numrows
    FROM addresses
    WHERE owner_Class = 'CORP'
          AND Owner_id = :old.corporate_id;
    IF (v_numrows > 0)
    THEN
      raise_application_error(
          -20001,
          'Cannot DELETE the corporate record because corporate address records exists.'
      );
    END IF;

    SELECT count(*)
    INTO v_numrows
    FROM phones
    WHERE owner_Class = 'CORP'
          AND Owner_id = :old.corporate_id;
    IF (v_numrows > 0)
    THEN
      raise_application_error(
          -20001,
          'Cannot DELETE the corporate record because corporate phone records exists.'
      );
    END IF;

    SELECT count(*)
    INTO v_numrows
    FROM internet_addresses
    WHERE owner_Class = 'CORP'
          AND Owner_id = :old.corporate_id;
    IF (v_numrows > 0)
    THEN
      raise_application_error(
          -20001,
          'Cannot DELETE the corporate record because corporate internet addresses records exists.'
      );
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
    tag_error.handle();

  END;

/

