
CREATE OR REPLACE TRIGGER "COURSE_ACTIVITIES_T1"
BEFORE INSERT
  ON COURSE_ACTIVITIES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
  DECLARE
    lv_caseload_type CASELOADS.caseload_type%TYPE;
    lv_caseload_desc CASELOADS.description%TYPE;
  BEGIN
    -- Lines added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    -- Change added by GJC 21/12/2007 to check if the trigger code should be executed or not
    /*
    ============================================================
       Version Number = 2.5  Date Modified = 21/12/2007
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  ------------------------
       Graham    21/12/2007  2.5        #7775: Code added for Merge, fix versioning
       NDB       21/07/2006  2.4        Defect #3494 Need to check :NEW.caseload_type and not
                                        lv_caseload_type before setting holiday flag.
       D Rice    05/05/2005  10.2.3     Defect# 1707 - Fix already made in version 10.2.2, however,
                                        version history missing for 10.2.2, so have added this.
       DNg       11/04/2006  10.2.2     Move IF statment for holiday flag outside of the IF statement
                                        checking that whether the caseload_type is NULL.
       GJC       20/01/2006  10.1.02    Only set caseload_type if it's null, defect 286
       Neil      21/12/2005  1.1        Intial version
    */
    IF INSERTING
    THEN
      IF :NEW.caseload_type IS NULL
      THEN
        Tag_Service.get_working_caseload(USER
        , lv_caseload_type
        , lv_caseload_desc
        );
        :NEW.caseload_type := lv_caseload_type;
      END IF;

      -- D#3494. NDB 21/7/2006 Need to check :NEW.caseload_type and not
      -- lv_caseload_type before setting holiday flag
      IF :NEW.caseload_type = 'INST'
      THEN
        :NEW.holiday_flag := 'N';
      ELSE
        :NEW.holiday_flag := 'Y';
      END IF;
    END IF;
    EXCEPTION
    WHEN OTHERS
    THEN
    Tag_Error.handle;
  END;


/



CREATE OR REPLACE TRIGGER "COURSE_ACTIVITIES_T2"
AFTER
INSERT
  ON course_activities
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
  DECLARE
    /* =========================================================
       Version Number = 2.6  Date Modified = 21-DEC-2007
       ========================================================= */

    /* MODIFICATION HISTORY
       Person      Date            Version       Comments
       ---------   ------       ------------  ------------------------------
       Graham      21-Dec-2007          2.6   #7775: Code added for Merge, fix versioning
    */
    lv_area_code    agency_locations.area_code%TYPE;
    lv_region_code  agency_locations.noms_region_code%TYPE;
    lv_agy_loc_type agency_locations.agency_location_type%TYPE;

    CURSOR c_al
    IS
      SELECT
        al.area_code,
        al.noms_region_code,
        al.agency_location_type
      FROM agency_locations al
      WHERE al.agy_loc_id = :NEW.provider_party_code;

    CURSOR c_t
    IS
      SELECT t.area_code
      FROM teams t
      WHERE t.team_id = :NEW.provider_party_id;
  BEGIN
    -- Lines added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    -- Change added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF INSERTING
    THEN

      IF :NEW.provider_party_class = 'AGY'
      THEN
        OPEN c_al;

        FETCH c_al
        INTO lv_area_code, lv_region_code, lv_agy_loc_type;

        CLOSE c_al;

        IF lv_region_code IS NOT NULL
        THEN
          lv_area_code := lv_region_code;
        END IF;

      ELSIF :NEW.provider_party_class = 'TEAM'
        THEN
          OPEN c_t;

          FETCH c_t
          INTO lv_area_code;

          CLOSE c_t;

      END IF;

      IF lv_area_code IS NOT NULL
      THEN
        INSERT INTO course_activity_areas
        (crs_acty_id, area_code
        )
        VALUES (:NEW.crs_acty_id, lv_area_code
        );
      END IF;
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
    tag_error.handle;
  END;

/



CREATE OR REPLACE TRIGGER "COURSE_ACTIVITIES_TA"
BEFORE INSERT OR UPDATE OR DELETE ON COURSE_ACTIVITIES
REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
  DECLARE
    l_scn NUMBER;
    l_tid VARCHAR2(32);
  BEGIN
    /*
    ============================================================
       Generated by 2.3  Date Generation 10-NOV-2008
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  -------------------------------
        GJC      05/03/2007  2.3          Allow application setting some columns
        GJC      23/10/2006  2.2          Audit DELETE statements
       David Ng  18/04/2006  2.0.1        Audit column trigger
    */
    IF INSERTING
    THEN
      :NEW.create_datetime := NVL(:NEW.create_datetime, systimestamp);
      :NEW.create_user_id := NVL(:NEW.create_user_id, user);
    ELSIF UPDATING
      THEN
        :NEW.modify_datetime := systimestamp;
        :NEW.modify_user_id := user;
    END IF;
    IF NOT DELETING
    THEN
      :NEW.Audit_timestamp := systimestamp;
      :NEW.Audit_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30);
      :NEW.Audit_Module_Name := SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65);
      :NEW.Audit_Client_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64);
      :NEW.Audit_Client_IP_Address := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39);
      :NEW.Audit_Client_Workstation_Name := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64);
      :NEW.Audit_Additional_Info := SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256);
    ELSE
      l_tid := DBMS_TRANSACTION.local_transaction_id(create_transaction=>FALSE);
      SELECT current_scn
      INTO l_scn
      FROM v$database;
      INSERT INTO OMS_DELETED_ROWS
      (
        table_name,
        xid,
        scn,
        audit_timestamp,
        audit_user_id,
        audit_module_name,
        audit_client_user_id,
        audit_client_ip_address,
        audit_client_workstation_name,
        audit_additional_info
      )
      VALUES
        (
          'COURSE_ACTIVITIES',
          converttoxid(l_tid),
          l_scn,
          systimestamp,
          SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30),
          SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256)
        );
    END IF;
  END;

/



CREATE OR REPLACE TRIGGER "COURSE_ACTIVITIES_T3"
AFTER
INSERT
  ON COURSE_ACTIVITIES
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
  DECLARE
    CURSOR get_prog_serv_prof ( lv_program_id PROGRAM_SERVICES.program_id%TYPE )
    IS
      SELECT
        program_profile_type,
        program_profile_code
      FROM PROGRAM_SERVICES_PROFILES
      WHERE program_id = lv_program_id;


    lv_prof_type PROGRAM_SERVICES_PROFILES.program_profile_type%TYPE;
    lv_prof_code PROGRAM_SERVICES_PROFILES.program_profile_code%TYPE;

  BEGIN
    -- Lines added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    -- Change added by GJC 21/12/2007 to check if the trigger code should be executed or not
    /*
    ============================================================
       Version Number = 2.4  Date Modified = 21-DEC-2007
    ============================================================
      MODIFICATION HISTORY
       Person       Date       version       Comments
    -----------   ---------     -----------  -------------------------------
       Graham     21-DEC-2007   2.4          #7775: Code added for Merge, fix versioning
       Neil       20-JUN-2006   2.3          Changed for Accredited programmes
       Patrick    12-JAN-2006   2.1          Changed course_activity_class to course_activity_type
       Patrick    12-JAN-2006   2.0          Intial version
    */

    IF INSERTING
    THEN
      IF :NEW.course_class = 'COURSE'
      THEN
        INSERT INTO COURSE_ACTIVITY_PROFILES
        (crs_acty_id, program_profile_type, program_profile_code)
          SELECT
            :NEW.crs_acty_id,
            program_profile_type,
            program_profile_code
          FROM PROGRAM_SERVICES_PROFILES
          WHERE program_id = :NEW.program_id;

      END IF;
    END IF;

    EXCEPTION
    WHEN OTHERS
    THEN
    Tag_Error.handle;
  END;


/


