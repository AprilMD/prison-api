
CREATE OR REPLACE TRIGGER "OFF_IMPRISON_STS_API_EVENT"
AFTER INSERT
  ON offender_imprison_statuses
REFERENCING new AS new old AS old
FOR EACH ROW
  DECLARE
    /******************************************************************************
       Name:  off_imprison_sts_api_event
       PURPOSE: This trigger is part of the api_events interface

       Revisions:
       Ver        Date          Author           Description
       ---------  ------------  ---------------  ------------------------------------
       1.0        29/07/2016    Paul Morris      Initial version
    ******************************************************************************/

      cannot_find_program EXCEPTION;
    PRAGMA EXCEPTION_INIT (cannot_find_program, -06508);

    v_convicted_status    VARCHAR2(12);
    v_imprisonment_status imprisonment_statuses.description%TYPE;
  BEGIN
    -- This trigger is required to fire during merge

    IF api_owner.core_utils.is_in_digital_prison(:new.offender_book_id)
    THEN
      api_owner.pss_data_extractor.get_imp_status_desc(
          p_imprisonment_status => :new.imprisonment_status,
          p_imprisonment_desc   => v_imprisonment_status,
          p_convicted_status    => v_convicted_status);
      --
      -- Send transaction message to unilink
      api_owner.pss_events.offender_update(
          p_offender_book_id => :new.offender_book_id,
          p_imprison_status  => :new.imprisonment_status,
          p_convicted_status => v_convicted_status,
          p_imprison_status_desc =>  v_imprisonment_status);
    END IF;

    EXCEPTION
    WHEN cannot_find_program THEN
    -- this needs to propagate so it rectifies itself
    RAISE;
    WHEN OTHERS THEN
    api_owner.nomis_api_log.error(p_msg_module => 'OFF_IMPRISON_STS_API_EVENT',
                                  p_message    => sqlerrm);
  END;
/



CREATE OR REPLACE TRIGGER "OFFENDER_IMPRISON_STATUSES_TA"
BEFORE INSERT OR UPDATE OR DELETE ON OFFENDER_IMPRISON_STATUSES
REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
  DECLARE
    l_scn NUMBER;
    l_tid VARCHAR2(32);
  BEGIN
    /*
    ============================================================
       Generated by 2.3  Date Generation 18-DEC-2009
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  -------------------------------
        GJC      05/03/2007  2.3          Allow application setting some columns
        GJC      23/10/2006  2.2          Audit DELETE statements
       David Ng  18/04/2006  2.0.1        Audit column trigger
    */
    IF INSERTING
    THEN
      :NEW.create_datetime := NVL(:NEW.create_datetime, systimestamp);
      :NEW.create_user_id := NVL(:NEW.create_user_id, user);
    ELSIF UPDATING
      THEN
        :NEW.modify_datetime := systimestamp;
        :NEW.modify_user_id := user;
    END IF;
    IF NOT DELETING
    THEN
      :NEW.Audit_timestamp := systimestamp;
      :NEW.Audit_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30);
      :NEW.Audit_Module_Name := SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65);
      :NEW.Audit_Client_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64);
      :NEW.Audit_Client_IP_Address := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39);
      :NEW.Audit_Client_Workstation_Name := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64);
      :NEW.Audit_Additional_Info := SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256);
    ELSE
      l_tid := DBMS_TRANSACTION.local_transaction_id(create_transaction=>FALSE);
      SELECT current_scn
      INTO l_scn
      FROM v$database;
      INSERT INTO OMS_DELETED_ROWS
      (
        table_name,
        xid,
        scn,
        audit_timestamp,
        audit_user_id,
        audit_module_name,
        audit_client_user_id,
        audit_client_ip_address,
        audit_client_workstation_name,
        audit_additional_info
      )
      VALUES
        (
          'OFFENDER_IMPRISON_STATUSES',
          converttoxid(l_tid),
          l_scn,
          systimestamp,
          SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30),
          SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256)
        );
    END IF;
  END;

/

