CREATE OR REPLACE TRIGGER "AGENCY_INTERNAL_LOCATIONS_T3"
AFTER INSERT
  ON AGENCY_INTERNAL_LOCATIONS
REFERENCING NEW AS NEW OLD AS OLD
  DECLARE
    /* =========================================================
          Version Number = 2.1  Date Modified = 02-Apr-2009
          ========================================================= */
    /* MODIFICATION HISTORY
    /* Name      Date        Version     Comment
      -------------------------------------------------------------
       Ragini   02-Apr-2009  2.1         15029: Added code to stop the execution for merge
       Surya    02-Oct-2008  2.0         Performance fix.
 */
  BEGIN
    -- Lines added by Ragini on 02-Apr-2009 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    IF tag_int_loc.g_internal_locations_tab.count > 0
    THEN
      FORALL i IN tag_int_loc.g_internal_locations_tab.FIRST..tag_int_loc.g_internal_locations_tab.LAST
      INSERT INTO living_units_mv
      (agy_loc_id,
       root_living_unit_id,
       living_unit_id,
       parent_living_unit_id,
       reserved_beds,
       description,
       tracking_flag
      )
        SELECT
          a.agy_loc_id,
          CONNECT_BY_ROOT a.internal_location_id AS root_living_unit_id,
          a.internal_location_id                 AS living_unit_id,
          a.parent_internal_location_id          AS parent_living_unit_id,
          0,
          a.description                          AS description,
          a.tracking_flag
        FROM agency_internal_locations a
        WHERE internal_location_id = tag_int_loc.g_internal_locations_tab(i)
        CONNECT BY PRIOR internal_location_id = parent_internal_location_id;

    END IF;

    tag_int_loc.g_internal_locations_tab.DELETE;
    EXCEPTION
    WHEN OTHERS
    THEN
    tag_error.handle();
  END agency_internal_locations_t3;

/



CREATE OR REPLACE TRIGGER "AGENCY_INTERNAL_LOCATIONS_T2"
AFTER INSERT OR UPDATE OF tracking_flag OR DELETE
  ON AGENCY_INTERNAL_LOCATIONS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
  DECLARE
    /* =========================================================
          Version Number = 2.1  Date Modified = 02-Apr-2009
          ========================================================= */
    /* MODIFICATION HISTORY
    /* Name      Date        Version     Comment
      -------------------------------------------------------------
       Ragini   02-Apr-2009  2.1         15029: Added code to stop the execution for merge
       Surya    02-Oct-2008  2.0         Performance fix.
 */
  BEGIN
    -- Lines added by Ragini on 02-Apr-2009 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    CASE
      WHEN UPDATING
      THEN
        UPDATE living_units_mv
        SET tracking_flag = :NEW.tracking_flag
        WHERE living_unit_id = :NEW.internal_location_id;
      WHEN INSERTING
      THEN
        tag_int_loc.g_internal_locations_tab
        (tag_int_loc.g_internal_locations_tab.COUNT
         + 1
        ) := :NEW.internal_location_id;
      WHEN DELETING
      THEN
        DELETE FROM living_units_mv
        WHERE living_unit_id = :OLD.internal_location_id;
    ELSE
      NULL;
    END CASE;
    EXCEPTION
    WHEN OTHERS
    THEN
    tag_error.handle();
  END agency_internal_locations_t2;

/



CREATE OR REPLACE TRIGGER "AGENCY_INTERNAL_LOCATIONS_TA"
BEFORE INSERT OR UPDATE OR DELETE ON AGENCY_INTERNAL_LOCATIONS
REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
  DECLARE
    l_scn NUMBER;
    l_tid VARCHAR2(32);
  BEGIN
    /*
    ============================================================
       Generated by 2.3  Date Generation 10-NOV-2008
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  -------------------------------
        GJC      05/03/2007  2.3          Allow application setting some columns
        GJC      23/10/2006  2.2          Audit DELETE statements
       David Ng  18/04/2006  2.0.1        Audit column trigger
    */
    IF INSERTING
    THEN
      :NEW.create_datetime := NVL(:NEW.create_datetime, systimestamp);
      :NEW.create_user_id := NVL(:NEW.create_user_id, user);
    ELSIF UPDATING
      THEN
        :NEW.modify_datetime := systimestamp;
        :NEW.modify_user_id := user;
    END IF;
    IF NOT DELETING
    THEN
      :NEW.Audit_timestamp := systimestamp;
      :NEW.Audit_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30);
      :NEW.Audit_Module_Name := SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65);
      :NEW.Audit_Client_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64);
      :NEW.Audit_Client_IP_Address := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39);
      :NEW.Audit_Client_Workstation_Name := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64);
      :NEW.Audit_Additional_Info := SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256);
    ELSE
      l_tid := DBMS_TRANSACTION.local_transaction_id(create_transaction=>FALSE);
      SELECT current_scn
      INTO l_scn
      FROM v$database;
      INSERT INTO OMS_DELETED_ROWS
      (
        table_name,
        xid,
        scn,
        audit_timestamp,
        audit_user_id,
        audit_module_name,
        audit_client_user_id,
        audit_client_ip_address,
        audit_client_workstation_name,
        audit_additional_info
      )
      VALUES
        (
          'AGENCY_INTERNAL_LOCATIONS',
          converttoxid(l_tid),
          l_scn,
          systimestamp,
          SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30),
          SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256)
        );
    END IF;
  END;

/



CREATE OR REPLACE TRIGGER "AGENCY_INTERNAL_LOCATIONS_T1"
AFTER
UPDATE
  ON AGENCY_INTERNAL_LOCATIONS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
  DECLARE
    lv_action_code            VARCHAR2(1);
    lv_deactivate_reason_code REFERENCE_CODES.code%TYPE;
    /* =========================================================
       Version Number = 2.8  Date Modified = 16-Oct-2008
       ========================================================= */

    /* MODIFICATION HISTORY
    /* Name      Date        Version     Comment
      -------------------------------------------------------------
       Igor      16-Oct-2008  2.8         #11337: fixed insert_agy_int_loc_amendments parameters when comment_text is modified
                                                  to :OLD.comment_text and :NEW.comment_text
       Graham    21-Dec-2007  2.7         #7775: Code added for Merge, fix versioning
       Krishna   25-Jan-2006  2.6         Storing deactivate_reason_code instead of description
                                          to resolve the issue while updating living_units from OIMMHOLO screen
    */
    --
    -- Compares two columns and returns true if they have changed.
    -- The action_code is set as per the workings of the
    -- agy_int_loc_amendments table.
    -- i.e. val  -> null = Deleted.
    --      null -> val  = Inserted.
    --      val1 -> val2 = Updated.
    -- Note: date fields are trunc'd so we are not concerned
    --       about the cast to varchar2.
    ----------------------------------------------------------------
    FUNCTION is_changed(p_old_val     IN  VARCHAR2,
                        p_new_val     IN  VARCHAR2,
                        p_action_code OUT VARCHAR2)
      RETURN BOOLEAN
    IS
      BEGIN
        IF p_old_val IS NULL AND p_new_val IS NOT NULL
        THEN
          p_action_code := 'A';
          /* Added */
          RETURN TRUE;
        END IF;

        IF p_old_val IS NOT NULL AND p_new_val IS NULL
        THEN
          p_action_code := 'D';
          /* Delete */
          RETURN TRUE;
        END IF;

        IF p_old_val <> p_new_val
        THEN
          p_action_code := 'U';
          /* Update */
          RETURN TRUE;
        END IF;

        RETURN FALSE;
      END is_changed;

    -------------------------------------------------------
    --
    -- Create a row in agy_int_loc_amendments
    --
    -------------------------------------------------------
    PROCEDURE insert_agy_int_loc_amendments(
      p_internal_location_id   AGY_INT_LOC_AMENDMENTS.internal_location_id%TYPE,
      p_action_code            AGY_INT_LOC_AMENDMENTS.action_code%TYPE,
      p_column_name            AGY_INT_LOC_AMENDMENTS.column_name%TYPE,
      p_old_value              AGY_INT_LOC_AMENDMENTS.old_value%TYPE,
      p_new_value              AGY_INT_LOC_AMENDMENTS.new_value%TYPE,
      p_deactivate_reason_code AGY_INT_LOC_AMENDMENTS.deactivate_reason_code%TYPE DEFAULT NULL)
    IS
      BEGIN
        INSERT INTO AGY_INT_LOC_AMENDMENTS
        (agy_int_loc_amendment_id,
         internal_location_id,
         action_code,
         amend_user_id,
         amend_date,
         column_name,
         old_value,
         new_value,
         deactivate_reason_code
        )
        VALUES (agy_int_loc_amendment_id.NEXTVAL,
                p_internal_location_id,
                p_action_code,
                USER,
                SYSDATE,
                p_column_name,
                p_old_value,
                p_new_value,
                p_deactivate_reason_code);

        EXCEPTION
        WHEN OTHERS
        THEN
        Tag_Error.handle();

      END insert_agy_int_loc_amendments;


  BEGIN
    -- Lines added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
    THEN
      RETURN;
    END IF;
    -- Change added by GJC 21/12/2007 to check if the trigger code should be executed or not
    IF is_changed(:OLD.internal_location_code, :NEW.internal_location_code, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Living Unit Id',
                                    :OLD.internal_location_code,
                                    :NEW.internal_location_code);
    END IF;

    IF is_changed(:OLD.agy_loc_id, :NEW.agy_loc_id, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Location',
                                    :OLD.agy_loc_id,
                                    :NEW.agy_loc_id);
    END IF;

    IF is_changed(:OLD.internal_location_type, :NEW.internal_location_type, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Accommodation Type',
                                    :OLD.internal_location_type,
                                    :NEW.internal_location_type);
    END IF;

    IF is_changed(:OLD.description, :NEW.description, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Description',
                                    :OLD.description,
                                    :NEW.description);
    END IF;

    IF is_changed(:OLD.capacity, :NEW.capacity, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Maximum Capacity',
                                    :OLD.capacity,
                                    :NEW.capacity);
    END IF;

    -- If the internal location is deactivated (via the active_flag), then log
    -- the deactivation reason against the active_flag history record.
    -- A separate record will exist in the amendments table showing the deactivate date.
    -- change although no reason code will exist against it.
    IF is_changed(:OLD.active_flag, :NEW.active_flag, lv_action_code)
    THEN
      IF :NEW.active_flag = 'N'
      THEN
        -- Krishna : 25-jan-2006; commented the code below to pass deactivate_reason_code instead of description
        -- lv_deactivate_reason_code := Oms_Miscellaneous.GetDescCode('LIV_UN_RSN', :NEW.deactivate_reason_code);
        lv_deactivate_reason_code := :NEW.deactivate_reason_code;
        -- Krishna : 25-Jan-2006; end of code change
      ELSE
        lv_deactivate_reason_code := NULL;
      END IF;

      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Active',
                                    :OLD.active_flag,
                                    :NEW.active_flag,
                                    lv_deactivate_reason_code);
    END IF;

    IF is_changed(:OLD.deactivate_reason_code, :NEW.deactivate_reason_code, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Deactivate Reason',
                                    :OLD.deactivate_reason_code,
                                    :NEW.deactivate_reason_code);
      -- Krishna 25-Jan-2006; Commented the below lines and passing code instead of description
      --                                     Oms_Miscellaneous.GetDescCode('LIV_UN_RSN', :OLD.deactivate_reason_code),
      --                                     Oms_Miscellaneous.GetDescCode('LIV_UN_RSN', :NEW.deactivate_reason_code));
    END IF;

    IF is_changed(:OLD.deactivate_date, :NEW.deactivate_date, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Deactivate Date',
                                    :OLD.deactivate_date,
                                    :NEW.deactivate_date);
    END IF;

    IF is_changed(:OLD.reactivate_date, :NEW.reactivate_date, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Proposed Reactivate Date',
                                    :OLD.reactivate_date,
                                    :NEW.reactivate_date);
    END IF;

    IF is_changed(:OLD.list_seq, :NEW.list_seq, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Sequence',
                                    :OLD.list_seq,
                                    :NEW.list_seq);
    END IF;

    IF is_changed(:OLD.cna_no, :NEW.cna_no, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Baseline CNA',
                                    :OLD.cna_no,
                                    :NEW.cna_no);
    END IF;

    IF is_changed(:OLD.certified_flag, :NEW.certified_flag, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Certified',
                                    :OLD.certified_flag,
                                    :NEW.certified_flag);
    END IF;

    IF is_changed(:OLD.comment_text, :NEW.comment_text, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Comments',
                                    :OLD.comment_text,
                                    :NEW.comment_text);
    END IF;

    IF is_changed(:OLD.unit_type, :NEW.unit_type, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Unit Type',
                                    :OLD.unit_type,
                                    :NEW.unit_type);

      -- Krishna 25-Jan-2006; Commented the below lines and passing code instead of description
      --Oms_Miscellaneous.GetDescCode ('HOU_UN_TYPE', :OLD.unit_type),
      --Oms_Miscellaneous.GetDescCode ('HOU_UN_TYPE', :NEW.unit_type));
    END IF;

    IF is_changed(:OLD.operation_capacity, :NEW.operation_capacity, lv_action_code)
    THEN
      insert_agy_int_loc_amendments(:NEW.internal_location_id,
                                    lv_action_code,
                                    'Operational Capacity',
                                    :OLD.operation_capacity,
                                    :NEW.operation_capacity);
    END IF;

    EXCEPTION
    WHEN OTHERS
    THEN
    Tag_Error.handle();
  END;

/
