
CREATE OR REPLACE TRIGGER "OFF_ALERTS_API_EVENT"
AFTER DELETE OR INSERT OR UPDATE OF expiry_date, alert_status
  ON offender_alerts
REFERENCING new AS new old AS old
FOR EACH ROW
  DECLARE
    /******************************************************************************
       Name:  off_alerts_api_event
       PURPOSE: This trigger is part of the api_events interface

       Revisions:
       Ver        Date          Author           Description
       ---------  ------------  ---------------  ------------------------------------
       1.0        29/07/2016    Paul Morris      Initial version
    ******************************************************************************/

      cannot_find_program EXCEPTION;
    PRAGMA EXCEPTION_INIT (cannot_find_program, -06508);
  BEGIN
    -- This trigger is required to fire during merge


    IF INSERTING
       AND api_owner.core_utils.is_in_digital_prison(:new.offender_book_id)
       AND :new.alert_status = 'ACTIVE'
    THEN
      --
      -- Send transaction message to unilink
      api_owner.pss_events.offender_update(
          p_offender_book_id      => :new.offender_book_id,
          p_warning_type          => :new.alert_type,
          p_warning_type_desc     => oms_miscellaneous.getdesccode('ALERT', :new.alert_type),
          p_warning_sub_type      => :new.alert_code,
          p_warning_sub_type_desc => oms_miscellaneous.getdesccode(p_domain        => 'ALERT_CODE',
                                                                   p_refcode       => :new.alert_code,
                                                                   p_parent_domain => 'ALERT',
                                                                   p_parent_code   => :new.alert_type),
          p_warning_date          => :new.alert_date,
          p_expiry_date           => :new.expiry_date,
          p_status                => :new.alert_status);
    END IF;

    IF UPDATING
       AND api_owner.core_utils.is_in_digital_prison(:new.offender_book_id)
    THEN
      --
      -- Send transaction message to unilink
      api_owner.pss_events.offender_update(
          p_offender_book_id      => :old.offender_book_id,
          p_warning_type          => :old.alert_type,
          p_warning_type_desc     => oms_miscellaneous.getdesccode('ALERT', :old.alert_type),
          p_warning_sub_type      => :old.alert_code,
          p_warning_sub_type_desc => oms_miscellaneous.getdesccode(p_domain        => 'ALERT_CODE',
                                                                   p_refcode       => :old.alert_code,
                                                                   p_parent_domain => 'ALERT',
                                                                   p_parent_code   => :old.alert_type),
          p_warning_date          => :old.alert_date,
          p_expiry_date           => :new.expiry_date,
          p_status                => :new.alert_status);
    END IF;

    IF DELETING
       AND api_owner.core_utils.is_in_digital_prison(:old.offender_book_id)
    THEN
      --
      -- Send transaction message to unilink
      api_owner.pss_events.offender_update(
          p_offender_book_id      => :old.offender_book_id,
          p_warning_type          => :old.alert_type,
          p_warning_type_desc     => oms_miscellaneous.getdesccode('ALERT', :old.alert_type),
          p_warning_sub_type      => :old.alert_code,
          p_warning_sub_type_desc => oms_miscellaneous.getdesccode(p_domain        => 'ALERT_CODE',
                                                                   p_refcode       => :old.alert_code,
                                                                   p_parent_domain => 'ALERT',
                                                                   p_parent_code   => :old.alert_type),
          p_warning_date          => :old.alert_date,
          p_status                => 'DELETED');

    END IF;


    EXCEPTION
    WHEN cannot_find_program THEN
    -- this needs to propagate so it rectifies itself
    RAISE;
    WHEN OTHERS THEN
    api_owner.nomis_api_log.error(p_msg_module => 'OFF_ALERTS_API_EVENT',
                                  p_message    => sqlerrm);
  END;
/



CREATE OR REPLACE TRIGGER "OFFENDER_ALERTS_TA"
BEFORE INSERT OR UPDATE OR DELETE ON OFFENDER_ALERTS
REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
  DECLARE
    l_scn NUMBER;
    l_tid VARCHAR2(32);
  BEGIN
    /*
    ============================================================
       Generated by 2.3  Date Generation 10-NOV-2008
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  -------------------------------
        GJC      05/03/2007  2.3          Allow application setting some columns
        GJC      23/10/2006  2.2          Audit DELETE statements
       David Ng  18/04/2006  2.0.1        Audit column trigger
    */
    IF INSERTING
    THEN
      :NEW.create_datetime := NVL(:NEW.create_datetime, systimestamp);
      :NEW.create_user_id := NVL(:NEW.create_user_id, user);
    ELSIF UPDATING
      THEN
        :NEW.modify_datetime := systimestamp;
        :NEW.modify_user_id := user;
    END IF;
    IF NOT DELETING
    THEN
      :NEW.Audit_timestamp := systimestamp;
      :NEW.Audit_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30);
      :NEW.Audit_Module_Name := SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65);
      :NEW.Audit_Client_User_ID := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64);
      :NEW.Audit_Client_IP_Address := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39);
      :NEW.Audit_Client_Workstation_Name := SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64);
      :NEW.Audit_Additional_Info := SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256);
    ELSE
      l_tid := DBMS_TRANSACTION.local_transaction_id(create_transaction=>FALSE);
      SELECT current_scn
      INTO l_scn
      FROM v$database;
      INSERT INTO OMS_DELETED_ROWS
      (
        table_name,
        xid,
        scn,
        audit_timestamp,
        audit_user_id,
        audit_module_name,
        audit_client_user_id,
        audit_client_ip_address,
        audit_client_workstation_name,
        audit_additional_info
      )
      VALUES
        (
          'OFFENDER_ALERTS',
          converttoxid(l_tid),
          l_scn,
          systimestamp,
          SYS_CONTEXT('NOMIS', 'AUDIT_USER_ID', 30),
          SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 65),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_USER_ID', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_IP_ADDRESS', 39),
          SYS_CONTEXT('NOMIS', 'AUDIT_CLIENT_WORKSTATION_NAME', 64),
          SYS_CONTEXT('NOMIS', 'AUDIT_ADDITIONAL_INFO', 256)
        );
    END IF;
  END;

/



CREATE OR REPLACE TRIGGER "OFFENDER_ALERTS_TWF"
AFTER
INSERT OR UPDATE
  ON OFFENDER_ALERTS
REFERENCING OLD AS OLD NEW AS NEW
FOR EACH ROW
  DECLARE
    /*
    ============================================================
       Version Number = 2.8  Date Modified = 21/12/2007
    ============================================================
      MODIFICATION HISTORY
       Person       Date      version      Comments
    -----------  --------- -----------  -------------------------------
       Graham    21/12/2007  2.8        #7775: Code added for Merge, fix versioning
       Krishna   16/03/2007  2.7        #6274 Added 'Updating' instead of just else in the condition
       NDB       15/03/2007  2.6        #6247 Removed extra / at end of file
       NDB       05/03/2007  2.5        #6247 Pass event_date as alert_date for workflow ACTIVE_ALT
                                              Pass event_date as expiry_date for workflow INACTIVE_ALT
                #6274 casenote should be fired when status changes (should not look at expiry date)
       GJC       09/05/2006  2.4        Async version
       Krishna   20/04/2006  2.3        Added 'made' for the active alert message; defect #1434
       Krishna   06/04/2006  2.2        Passing blank to tag_workflow.create_case_note proc. as there is a change to the proc. default to 'AUTO'
       Krishna   03/04/2006  2.1        Passing NULL to tag_workflow.create_case_note proc. as there is a change to the proc.
       Krishna   03/04/2006  2.0        Alert triggers (ACTIVE_ALT, INACTIVE_ALT) will create case note message
                                        The active alert trigger (ACTIVE_ALT) will fire when a new offender alert is created
                                        or an existing inactive alert is re-activated
                                        The inactive alert trigger (INACTIVE_ALT) will fire when an active offender alert is
                                        in-activated.
    */
    --@@@ Procedure to create new casenote alert for the offender
    PROCEDURE create_offender_alert_msg(
      p_off_book_id OFFENDER_ALERTS.offender_book_id%TYPE,
      p_alert_type  OFFENDER_ALERTS.alert_type%TYPE,
      p_alert_code  OFFENDER_ALERTS.alert_code%TYPE,
      p_event_date  OFFENDER_ALERTS.alert_date%TYPE,
      p_trg_type    VARCHAR2
    )
    IS
      lv_xml XMLTYPE;
      BEGIN
        -- Lines added by GJC 21/12/2007 to check if the trigger code should be executed or not
        IF SYS_CONTEXT('NOMIS', 'AUDIT_MODULE_NAME', 50) = 'MERGE'
        THEN
          RETURN;
        END IF;
        -- Change added by GJC 21/12/2007 to check if the trigger code should be executed or not
        lv_xml := Tag_Wfmsg.create_xml;
        Tag_Wfmsg.append('alert_type', p_alert_type, lv_xml);
        Tag_Wfmsg.append('alert_code', p_alert_code, lv_xml);
        Tag_Workflow.create_case_note(p_offender_book_id => p_off_book_id,
                                      p_trigger_name => p_trg_type,
                                      p_message => lv_xml.getstringval(),
                                      p_event_id => NULL,
                                      p_event_date => p_event_date,
                                      p_note_source_code =>'AUTO');
        EXCEPTION
        WHEN OTHERS
        THEN
        Tag_Error.handle();
      END create_offender_alert_msg;
  BEGIN
    IF INSERTING
    THEN
      IF :NEW.alert_status = 'INACTIVE'
      THEN
        create_offender_alert_msg(:NEW.offender_book_id,
                                  :NEW.alert_type,
                                  :NEW.alert_code,
                                  :NEW.expiry_date,
                                  'INACTIVE_ALT'
        );
      ELSE
        create_offender_alert_msg(:NEW.offender_book_id,
                                  :NEW.alert_type,
                                  :NEW.alert_code,
                                  :NEW.alert_date,
                                  'ACTIVE_ALT'
        );
      END IF;
    ELSIF UPDATING       --@@@ Krishna, 16/03/3007 #6274
      THEN
        IF :OLD.alert_status <> :NEW.alert_status
        THEN
          IF :NEW.alert_status = 'INACTIVE'
          THEN
            create_offender_alert_msg(:OLD.offender_book_id,
                                      :OLD.alert_type,
                                      :OLD.alert_code,
                                      :NEW.expiry_date,
                                      'INACTIVE_ALT'
            );
          ELSE

            create_offender_alert_msg(:OLD.offender_book_id,
                                      :OLD.alert_type,
                                      :OLD.alert_code,
                                      :NEW.alert_date,
                                      'ACTIVE_ALT'
            );
          END IF;
        END IF;
    END IF;
  END;

/

