import org.jsonschema2pojo.AnnotationStyle
import org.raml.jaxrs.codegen.core.Configuration
import org.raml.jaxrs.codegen.core.Generator


buildscript {
	repositories {
		maven { url "https://repo.spring.io/plugins-release" }
		maven { url "https://plugins.gradle.org/m2" }
	}
	dependencies {
		classpath "org.raml:raml-jaxrs-codegen-core:1.3.4"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_spring_boot}"
	}
}

plugins {
	id "org.sonarqube" version "1.2"
}



subprojects {

	repositories {
		mavenCentral()
		mavenLocal()
	}

	apply plugin: "java"
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8


	// global exclusions
	configurations {
		all*.exclude module: "commons-logging"
		all*.exclude module: "log4j"
		all*.exclude module: "c3p0"
		all*.exclude group: "org.apache.tomcat"
		all*.exclude group: "org.apache.tomcat.embed"
	}


	apply plugin: "maven"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "org.springframework.boot"

	group = "net.syscon.elite"
	version = "1.0-SNAPSHOT"

	install.repositories.mavenInstaller.pom.whenConfigured { generatedPom ->
		generatedPom.project {
			name = project.name
			description = project.description
			url "http://www.syscon.net"
			organization { name "Syscon Justice Systems"; url "http://www.syscon.net" }
			developers {
				developer {
					id "syscon-elite-team"
					name "Syscon Elite Team"
					organization  "Syscon Justice Systems"
					organizationUrl "http://www.syscon.net"
				}
			}
		}
	}

}


project(":elite2-raml") {

	task "generate-sources" {
		def configs = new Configuration()
		def ramlDir = new File("${rootDir}/elite2-raml")
		def sourceGenDir = new File("${rootDir}/elite2-web/src/main/generated")
		sourceGenDir.listFiles().each{ f -> if (f != null) delete f }
		sourceGenDir.mkdirs()
		configs.setOutputDirectory(sourceGenDir)
		configs.setSourceDirectory(ramlDir)
		configs.setBasePackageName("net.syscon.elite.web.api");
		configs.setJaxrsVersion(Configuration.JaxrsVersion.JAXRS_2_0)
		configs.setJsonMapper(AnnotationStyle.JACKSON2)
		configs.setUseJsr303Annotations(false)
		new Generator().run(new FileReader(new File(ramlDir, "./api.raml")), configs, "")
	}
}



project(":elite2-web") {

	def configsDir = new java.io.File("${rootDir}/elite2-web/src/main/configs").absolutePath.replace('\\', '/') 
	bootRun {
		jvmArgs("-Dspring.profiles.active=dev", "-Dsyscon.configs.dir=${configsDir}")
		addResources = true 
	}
	
	sourceSets { generated.java.srcDirs "${rootDir}/elite2-web/src/main/generated" }
	compileJava { source "${rootDir}/elite2-web/src/main/generated" }

	dependencies {

		compile files("${rootDir}/elite2-web/src/main/configs")
		compile fileTree(dir: "${rootDir}/libs", include: "*.jar")
		
		compile("org.springframework.boot:spring-boot-starter-jetty")
		compile("org.springframework.boot:spring-boot-starter-jersey") {
			exclude(module: "spring-boot-starter-tomcat")
		}
		compile("org.springframework.boot:spring-boot-starter-data-jpa")
		compile("org.springframework.boot:spring-boot-starter-cache")
		compile("org.springframework.boot:spring-boot-starter-web") {
			exclude(module: "spring-boot-starter-tomcat")
		}
		
		//compile("org.springframework.boot:spring-boot-starter-actuator")
		//compile("org.springframework.boot:spring-boot-starter-security")
		
		compile("org.hibernate:hibernate-ehcache:${version_hibernate}")
		compile ("com.zaxxer:HikariCP:${version_hikaricp}") {
			exclude(module: "tools")
		}
		
		testCompile("org.springframework.boot:spring-boot-starter-test")

	}

}

