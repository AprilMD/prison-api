buildscript {
	repositories {
		maven { url "${artifactory_url}/libs-release" }
		
	}
	dependencies {
		classpath "org.raml:raml-jaxrs-codegen-core:1.3.4"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_spring_boot}"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
	}
}


defaultTasks "clean", "run"


subprojects {

	repositories {
		maven { url "${artifactory_url}/libs-release" }
		maven { url "${artifactory_url}/third-party" }
	}

	// global exclusions
	configurations {
		all*.exclude module: "commons-logging"
		all*.exclude module: "log4j"
		all*.exclude module: "c3p0"
		all*.exclude group: "org.apache.tomcat"
		all*.exclude group: "org.apache.tomcat.embed"
		all*.exclude module: "spring-boot-starter-tomcat"
		all*.exclude module: "tools"

		integrationTestCompile.extendsFrom testCompile
		integrationTestRuntime.extendsFrom testRuntime
	}

	apply plugin: "java"
	apply plugin: "org.sonarqube"
	apply plugin: "checkstyle"
	apply plugin: "maven"
	apply plugin: "maven-publish"
	apply plugin: "idea"
	apply plugin: "eclipse"
	apply plugin: "org.springframework.boot"

	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8	

	group = "net.syscon.elite"
	version = "1.0-SNAPSHOT"
	
	sonarqube {
		properties {
			property "sonar.projectName", "Elite2"
			property "sonar.projectKey", "net.syscon.elite:elite2"
			property "sonar.sourceEncoding", "UTF-8"
			property "sonar.login", "e73c987cc6cad28be858a8610636c1d2545c4c96"
			property "sonar.host.url", "http://chronos.syscon.ca:9000/sonar"
			property "sonar.sources", "src/main/java"
			property "sonar.exclusions", "**/generated/**"
		}
	}	
	
	dependencies {
		compile( "org.apache.commons:commons-lang3:3.5")
		compile("com.google.code.findbugs:jsr305:3.0.1")
	}

	install.repositories.mavenInstaller.pom.whenConfigured { generatedPom ->
		generatedPom.project {
			name = project.name
			description = project.description
			url "http://www.syscon.net"
			organization { name "Syscon Justice Systems"; url "http://www.syscon.net" }
			developers {
				developer {
					id "syscon-elite-team"
					name "Syscon Elite Team"
					organization  "Syscon Justice Systems"
					organizationUrl "http://www.syscon.net"
				}
			}
		}
	}


	def repositoryType = project.version.endsWith('-SNAPSHOT')? "snapshot": "release"
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
			}
		}
		repositories {
			maven {
				credentials {
					username = "${artifactory_username}"
					password = "${artifactory_password}"
				}
				url "${artifactory_url}/libs-${repositoryType}-local"
			}
		}
	}

	sourceSets {
		integrationTest {
			java.srcDir file("src/integration-test/resources")
			resources.srcDir file("src/integration-test/resources")
			compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
			runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.integrationTestRuntime
		}
	}

	task integrationTest(type: Test) {
		testClassesDir = sourceSets.integrationTest.output.classesDir
		classpath = sourceSets.integrationTest.runtimeClasspath
	}

}


def sourceGenDir = file("${rootDir}/elite2-api/src/main/generated")

project(":elite2-api") {

	dependencies {
		compile("org.springframework.boot:spring-boot-starter-jersey")
	}
	
	sourceSets.main.java.srcDirs sourceGenDir

	processResources {
		def configs = new org.raml.jaxrs.codegen.core.Configuration()
		def ramlDir = new File("${rootDir}/elite2-api/raml")
		sourceGenDir.listFiles().each{ f -> if (f != null) delete f }
		sourceGenDir.mkdirs()
		
		configs.outputDirectory = sourceGenDir
		configs.sourceDirectory = ramlDir
		configs.setBasePackageName("net.syscon.elite.web.api");
		configs.setJaxrsVersion(org.raml.jaxrs.codegen.core.Configuration.JaxrsVersion.JAXRS_2_0)
		configs.setJsonMapper(org.jsonschema2pojo.AnnotationStyle.JACKSON2)
		configs.setUseJsr303Annotations(false)
		configs.jsonMapperConfiguration = new HashMap<>()
		configs.jsonMapperConfiguration["useLongIntegers"] = "true"
		configs.jsonMapperConfiguration["includeToString"] = "true"
		configs.jsonMapperConfiguration["includeHashcodeAndEquals"] = "true"
		configs.jsonMapperConfiguration["includeConstructors"] = "true"
		configs.jsonMapperConfiguration["useCommonsLang3"] = "true"
		def sourceGenerator = new org.raml.jaxrs.codegen.core.Generator()
		sourceGenerator.run(new FileReader(new File(ramlDir, "./api.raml")), configs, "")
	}
	
	compileJava.dependsOn processResources
	
	task run { doLast() { println ">>> Source Code Generated on ${sourceGenDir.absolutePath}!"} }
	run.dependsOn jar
}



project(":elite2-web") {

	dependencies {

		compile project(":elite2-api")
		compile files("${rootDir}/elite2-web/src/main/configs")

		compile("com.oracle:ojdbc7:12.1.0.1")
		compile("org.springframework.boot:spring-boot-starter-web")
		compile("org.springframework.boot:spring-boot-starter-aop")
		compile("org.springframework.boot:spring-boot-starter-jdbc")
		compile("org.springframework.boot:spring-boot-starter-jetty")
		compile("com.zaxxer:HikariCP:${version_hikaricp}")

		testCompile("org.springframework.boot:spring-boot-starter-test")
		testCompile("io.rest-assured:rest-assured:3.0.2")
		testCompile("io.rest-assured:json-schema-validator:3.0.2")
		testCompile("io.rest-assured:spring-mock-mvc:3.0.2")

	}


	def configsDir = file("${rootDir}/elite2-web/src/main/configs").absolutePath
	processResources {
		def devConfigsFile = file("${configsDir}/elite2-dev.yml")
		if (!devConfigsFile.exists()) {
			copy {
				from (configsDir) { include "elite2-dev-SAMPLE.yml" }
				into configsDir
				rename { String fileName -> fileName.replace("elite2-dev-SAMPLE.yml", "elite2-dev.yml") }
			}
		}
	}

	springBoot {
		mainClass = "net.syscon.elite.Elite2Application"
		executable = true
		buildInfo()
	}

	bootRun {
		jvmArgs("-Dspring.profiles.active=dev", "-Dsyscon.configs.dir=${configsDir}")
		addResources = true 
	}

	compileJava.dependsOn processResources

	task run { doLast() { println "Server ready for requests ..." } }
	run.dependsOn bootRun

}

