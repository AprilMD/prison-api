import org.jsonschema2pojo.AnnotationStyle
import org.raml.jaxrs.codegen.core.Generator

buildscript {
	repositories {
		maven { url "http://chronos.syscon.ca:8081/artifactory/libs-release" }
	}
	dependencies {
		classpath "org.raml:raml-jaxrs-codegen-core:1.3.4"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${version_spring_boot}"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
	}
}

defaultTasks 'clean', 'run'


subprojects {

	repositories {
		maven { url "http://chronos.syscon.ca:8081/artifactory/libs-release" }
	}

	apply plugin: 'java'
	apply plugin: 'org.sonarqube'
	apply plugin: 'checkstyle'


	sonarqube {
		properties {
			property "sonar.projectName", "Elite2"
			property "sonar.projectKey", "net.syscon.elite:elite2"
			property "sonar.sourceEncoding", "UTF-8"
			property "sonar.login", "e73c987cc6cad28be858a8610636c1d2545c4c96"
			property "sonar.host.url", "http://chronos.syscon.ca:9000/sonar"
			property "sonar.sources", "src/main/java,src/main/generated"
		}
	}


	apply plugin: "java"
	apply plugin: 'idea'
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8


	// global exclusions
	configurations {
		all*.exclude module: "commons-logging"
		all*.exclude module: "log4j"
		all*.exclude module: "c3p0"
		all*.exclude group: "org.apache.tomcat"
		all*.exclude group: "org.apache.tomcat.embed"
		all*.exclude module: "spring-boot-starter-tomcat"
	}


	apply plugin: "maven"
	apply plugin: "eclipse"
	apply plugin: "org.springframework.boot"

	group = "net.syscon.elite"
	version = "1.0-SNAPSHOT"

	install.repositories.mavenInstaller.pom.whenConfigured { generatedPom ->
		generatedPom.project {
			name = project.name
			description = project.description
			url "http://www.syscon.net"
			organization { name "Syscon Justice Systems"; url "http://www.syscon.net" }
			developers {
				developer {
					id "syscon-elite-team"
					name "Syscon Elite Team"
					organization  "Syscon Justice Systems"
					organizationUrl "http://www.syscon.net"
				}
			}
		}
	}
}

def sourceGenDir = file("${rootDir}/elite2-web/src/main/generated")



project(":elite2-raml") {
	processResources {
		def configs = new org.raml.jaxrs.codegen.core.Configuration()
		def ramlDir = new File("${rootDir}/elite2-raml")
		sourceGenDir.listFiles().each{ f -> if (f != null) delete f }
		sourceGenDir.mkdirs()
		configs.outputDirectory = sourceGenDir
		configs.sourceDirectory = ramlDir
		configs.setBasePackageName("net.syscon.elite.web.api");
		configs.setJaxrsVersion(org.raml.jaxrs.codegen.core.Configuration.JaxrsVersion.JAXRS_2_0)
		configs.setJsonMapper(AnnotationStyle.JACKSON2)
		configs.setUseJsr303Annotations(false)
		configs.jsonMapperConfiguration = new HashMap<>()
		configs.jsonMapperConfiguration["useLongIntegers"] = "true"
		configs.jsonMapperConfiguration["includeToString"] = "true"
		configs.jsonMapperConfiguration["includeHashcodeAndEquals"] = "true"
		configs.jsonMapperConfiguration["includeConstructors"] = "true"
		configs.jsonMapperConfiguration["useCommonsLang3"] = "true"
		new Generator().run(new FileReader(new File(ramlDir, "./api.raml")), configs, "")
	}

	task run { doLast() { println ">>> Source Code Generated on ${sourceGenDir.absolutePath}!"} }
	run.dependsOn processResources

}



project(":elite2-web") {

	def configsDir = file("${rootDir}/elite2-web/src/main/configs").absolutePath
	processResources {
		def devConfigsFile = file("${configsDir}/elite2-dev.yml")
		if (!devConfigsFile.exists()) {
			copy {
				from (configsDir) { include "elite2-dev-SAMPLE.yml" }
				into configsDir
				rename { String fileName -> fileName.replace("elite2-dev-SAMPLE.yml", "elite2-dev.yml") }
			}
		}
	}


	bootRun {
		jvmArgs("-Dspring.profiles.active=dev", "-Dsyscon.configs.dir=${configsDir}")
		addResources = true 
	}

	sourceSets.main.java.srcDirs sourceGenDir
	compileJava { source sourceGenDir.absolutePath }
	compileJava.dependsOn processResources

	dependencies {

		compile files("${rootDir}/elite2-web/src/main/configs")
		compile fileTree(dir: "${rootDir}/libs", include: "*.jar")
		
		compile("org.springframework.boot:spring-boot-starter-web")
		compile("org.springframework.boot:spring-boot-starter-aop")
		compile("org.springframework.boot:spring-boot-starter-jdbc")
		compile("org.springframework.boot:spring-boot-starter-jetty")
		compile("org.springframework.boot:spring-boot-starter-jersey")

		compile "org.apache.commons:commons-lang3:3.5"
		compile ("com.zaxxer:HikariCP:${version_hikaricp}") { exclude(module: "tools") }

		testCompile("org.springframework.boot:spring-boot-starter-test")

	}

	task run { doLast() { println "Server ready for requests ..." } }
	run.dependsOn bootRun

}

