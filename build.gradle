import java.text.SimpleDateFormat

buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

group 'net.syscon.elite'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'groovy'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

def applicationName = 'elite2-api'
def today = java.time.Instant.now()
project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8

def todayDate = java.time.LocalDate.now()
def formatter = java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd")
version todayDate.format(formatter)

jar {
    baseName = applicationName
    manifest {
        attributes 'Implementation-Title': applicationName,
                'Implementation-Version': System.getenv('CI') ? "${version}.${System.getenv('CIRCLE_BUILD_NUM')}" : version
    }
}

springBoot {
    buildInfo {
        properties {
            artifact = rootProject.name
            version = System.getenv('CI') ? "${version}.${System.getenv('CIRCLE_BUILD_NUM')}" : version
            group = 'net.syscon.elite'
            name = rootProject.name
            time = today
            additional = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName
            ]
        }
    }
}

configurations {
    compile.exclude module: "commons-logging"
    compile.exclude module: "log4j"
    compile.exclude module: "c3p0"
    compile.exclude module: "tomcat-jdbc"
}

// Exclude Serenity BDD integration and IntTest tests from 'test' task so they can be controlled independently
test {
    exclude "**/executablespecification/*", "**/*IntTest*"
}

dependencies {

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor('org.projectlombok:lombok:1.18.4')

    compile files("${rootDir}/lib/ojdbc8-12.2.0.1.jar")

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-jersey') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-devtools")

    compile("org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE")
    compile("org.springframework.security:spring-security-jwt:1.0.9.RELEASE")

    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'com.sun.xml.bind:jaxb-impl:2.3.0'
    compile 'com.sun.xml.bind:jaxb-core:2.3.0'
    compile 'javax.activation:activation:1.1.1'

    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
    compile("org.apache.commons:commons-text:1.4")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.2")
    compile("com.github.jsqlparser:jsqlparser:1.1")
    compile("net.sf.ehcache:ehcache:2.10.4")
    compile("io.jsonwebtoken:jjwt:${version_jjwt}")
    compile("com.zaxxer:HikariCP:${version_hikaricp}")

    compile("io.swagger:swagger-jersey2-jaxrs:1.5.18")
    compile("io.springfox:springfox-swagger-ui:2.9.2")
    compile("io.springfox:springfox-swagger2:2.9.2")
    compile("net.logstash.logback:logstash-logback-encoder:5.2")
    compile("com.microsoft.azure:applicationinsights-core:${version_applicationinsights}")
    compile("com.microsoft.azure:applicationinsights-web:${version_applicationinsights}")
    compile("com.microsoft.azure:applicationinsights-logging-logback:${version_applicationinsights}")

    compile("org.apache.commons:commons-lang3:3.7")
    compile("commons-io:commons-io:2.6")
    compile("org.apache.commons:commons-text:1.1")
    compile("com.google.code.findbugs:jsr305:3.0.2")

    compileOnly 'org.projectlombok:lombok:1.18.4'

    runtime('org.hsqldb:hsqldb:2.4.0')
    runtime("org.flywaydb:flyway-core:5.2.0")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.boot:spring-boot-test-autoconfigure")
    testCompile("io.rest-assured:rest-assured:3.0.6")
    testCompile("io.rest-assured:json-schema-validator:3.0.6")
    testCompile("io.rest-assured:spring-mock-mvc:3.0.6")
    testCompile("org.springframework.security:spring-security-test:4.2.3.RELEASE")
    testCompile("com.google.code.gson:gson:2.8.2")
    testCompile("org.assertj:assertj-core:3.8.0")
    testCompile("org.powermock:powermock-module-junit4:1.7.3")
    testCompile("org.powermock:powermock-api-mockito:1.7.3")

    testCompile 'com.tngtech.java:junit-dataprovider:1.13.1'
    testCompile "org.seleniumhq.selenium:htmlunit-driver:2.28.2"
    // Annoyingly the version of selenium needs to be specified, otherwise an
    // old one which doesnt work (2.53.1) is pulled in
    testCompile 'org.seleniumhq.selenium:selenium-server:3.7.1'
    testCompile 'org.seleniumhq.selenium:selenium-java:3.7.1'
    testCompile 'org.seleniumhq.selenium:selenium-api:3.7.1'
    testCompile "org.seleniumhq.selenium:selenium-edge-driver:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-opera-driver:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-safari-driver:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-support:3.7.1"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.7.1"

    testCompile 'net.serenity-bdd:serenity-core:1.8.21'
    testCompile 'net.serenity-bdd:serenity-junit:1.8.21'
    testCompile 'net.serenity-bdd:serenity-spring:1.8.21'
    testCompile 'net.serenity-bdd:serenity-cucumber:1.6.10'

    testCompileOnly 'org.projectlombok:lombok:1.18.4'
}

task testIntegration(type: Test) {
    minHeapSize = "2G"
    maxHeapSize = "2G"
    include "**/*IntTest*"
}

task testWithSchemaNomis(type: Test) {
    // Limit the JVM, otherwise on CircleCi if the memory used gets too close to the 4G container
    // maximum the test process is somewhat viciously killed and exits with code 137
    minHeapSize = "2G"
    maxHeapSize = "2G"
    def nomisEnvVars = ['api.db.target'   : 'nomis',
                        'cucumber.options': "--tags 'not (@wip or @broken)'"]

    exclude "**/persistence/*"
    exclude "**/*IntTest*"
    environment nomisEnvVars
}

task testWithSchemaNomisOracle(type: Test) {
    minHeapSize = "2G"
    maxHeapSize = "2G"
    def nomisEnvVars = ['api.db.target'   : 'nomis', 'api.db.dialect': 'oracle',
                        'cucumber.options': "--tags 'not (@wip or @broken)'"]

    exclude "**/persistence/*"
    exclude "**/*IntTest*"
    environment nomisEnvVars
}

test.dependsOn testIntegration, testWithSchemaNomis
